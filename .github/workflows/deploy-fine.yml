name: Build documentation

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pages: write

env:
  INSTANCE: 'Writerside2/test'
  IS_GROUP: 'true'
  DOCKER_VERSION: '2025.03.8340'
  ALGOLIA_APP_NAME: 'ERUSDW4898'
  ALGOLIA_INDEX_NAME: 'index_GH_test'
  CONFIG_JSON_PRODUCT: 'AUTO'
  CONFIG_JSON_VERSION: '1.0'
  PDF: 'PDF.xml'

jobs:
  build:
    runs-on: ubuntu-latest
#    container: registry.jetbrains.team/p/writerside/builder/writerside-builder:2025.03
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          set -x
          echo "Build documentation script started"
          INSTANCE_ID=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE_ID" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ARTIFACT_GROUP="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          is-group: ${{ env.IS_GROUP }}
          artifact: ${{ steps.define-ids.outputs.artifact }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: artifacts/*
          retention-days: 7

  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance ID
        run: |
          INSTANCE_ID="${INSTANCE#*/}"
          INSTANCE_ID_UPPER=$(echo "$INSTANCE_ID" | tr '[:lower:]' '[:upper:]')
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "Extracted ID: $INSTANCE_ID_UPPER"

      - name: Build Writerside docs using Docker
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          pdf: ${{ env.PDF }}
          artifact: pdfSource${{ env.INSTANCE_ID_UPPER }}.pdf

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            artifacts/pdfSource${{ env.INSTANCE_ID_UPPER }}.pdf
            artifacts/pdfSource${{ env.INSTANCE_ID_UPPER }}.html
          retention-days: 7

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}
          is-group: ${{ env.IS_GROUP }}

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  publish-indexes:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Process Algolia indexes
        run: |
          # Check if IS_GROUP is true
          if [ "${{ env.IS_GROUP }}" = "true" ]; then
            echo "Processing as a group instance - handling multiple index files"
          
            # Check if search directory exists
            if [ -d "artifacts/search" ]; then
              # Create directory for extracted indexes
              mkdir -p algolia-indexes
          
              # Find all zip files in the search directory and process them
              find artifacts/search -name "algolia-indexes-*.zip" -type f | while read -r index_file; do
                echo "Processing index file: $index_file"
          
                # Extract the product ID from the filename
                # Pattern: algolia-indexes-PRODUCTID.zip
                filename=$(basename "$index_file")
                product_id=${filename#algolia-indexes-}
                product_id=${product_id%.zip}
          
                echo "Extracted product ID: $product_id"
          
                # Create a unique directory for this product
                extract_dir="algolia-indexes/$product_id"
                mkdir -p "$extract_dir"
          
                # Unzip the index file
                unzip -O UTF-8 -qq "$index_file" -d "$extract_dir"
          
                # Update Algolia index for this file with the extracted product ID
                if [ -z "${{ secrets.ALGOLIA_KEY }}" ]; then
                  echo "ALGOLIA_KEY secret is not set in GitHub Secrets"
                  exit 1
                else
                  echo "Updating Algolia index for product: $product_id"
                  env "algolia-key=${{ secrets.ALGOLIA_KEY }}" java -jar /opt/builder/help-publication-agent.jar \
                  update-index \
                  --application-name ${{ env.ALGOLIA_APP_NAME }} \
                  --index-name ${{ env.ALGOLIA_INDEX_NAME }} \
                  --product "$product_id" \
                  --version ${{ env.CONFIG_JSON_VERSION }} \
                  --index-directory "$extract_dir" \
                  2>&1 | tee "algolia-update-index-log-$product_id.txt"
                fi
              done
            else
              echo "Warning: artifacts/search directory not found"
              exit 1
            fi
          else
            echo "Processing as a single instance"
            # Original logic for single instance
            unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.algolia_artifact }}" -d algolia-indexes
          
            if [ -z "${{ secrets.ALGOLIA_KEY }}" ]; then
              echo "ALGOLIA_KEY secret is not set in GitHub Secrets"
              exit 1
            else
              env "algolia-key=${{ secrets.ALGOLIA_KEY }}" java -jar /opt/builder/help-publication-agent.jar \
              update-index \
              --application-name ${{ env.ALGOLIA_APP_NAME }} \
              --index-name ${{ env.ALGOLIA_INDEX_NAME }} \
              --product ${{ env.CONFIG_JSON_PRODUCT }} \
              --version ${{ env.CONFIG_JSON_VERSION }} \
              --index-directory algolia-indexes/ \
              2>&1 | tee algolia-update-index-log.txt
            fi
          fi
