name: Build documentation

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pages: write

env:
  INSTANCE: 'Writerside2/test'
  IS_GROUP: 'true'
  DOCKER_VERSION: '2025.03'
  ALGOLIA_APP_NAME: 'ERUSDW4898'
  ALGOLIA_INDEX_NAME: 'index_GH_test'
  CONFIG_JSON_PRODUCT: 'AUTO'
  CONFIG_JSON_VERSION: '1.0'
  PDF: 'PDF.xml'

jobs:
  build:
    runs-on: ubuntu-latest
#    container: registry.jetbrains.team/p/writerside/builder/writerside-builder:243.22562
#    runs-on: ubuntu-latest
    outputs:
      algolia_artifact: ${{ steps.define-ids.outputs.algolia_artifact }}
      artifact: ${{ steps.define-ids.outputs.artifact }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance id and artifacts
        id: define-ids
        run: |
          set -x
          echo "Build documentation script started"
          INSTANCE_ID=${INSTANCE#*/}
          INSTANCE_ID_UPPER=$(echo "$INSTANCE_ID" | tr '[:lower:]' '[:upper:]')
          ARTIFACT="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ARTIFACT_GROUP="webHelp${INSTANCE_ID_UPPER}2-all.zip"
          ALGOLIA_ARTIFACT="algolia-indexes-${INSTANCE_ID_UPPER}.zip"

          # Print the values
          echo "INSTANCE_ID_UPPER: $INSTANCE_ID_UPPER"
          echo "ARTIFACT: $ARTIFACT"
          echo "ALGOLIA_ARTIFACT: $ALGOLIA_ARTIFACT"

          # Set the environment variables and outputs
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "ARTIFACT=$ARTIFACT" >> $GITHUB_ENV
          echo "ALGOLIA_ARTIFACT=$ALGOLIA_ARTIFACT" >> $GITHUB_ENV
          echo "artifact=$ARTIFACT" >> $GITHUB_OUTPUT
          echo "algolia_artifact=$ALGOLIA_ARTIFACT" >> $GITHUB_OUTPUT
#
#          set -e
#          git config --global --add safe.directory .
#          export DISPLAY=:99
#          Xvfb :99 &
#          /opt/builder/bin/idea.sh helpbuilderinspect -source-dir . -p $INSTANCE --runner github -output-dir artifacts
#          echo "Testing existence of $ARTIFACT..."
#          ls -la artifacts
#          test -e ./artifacts/$ARTIFACT && echo $ARTIFACT exists

      - name: Build docs using Writerside Docker builder
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          is-group: ${{ env.IS_GROUP }}

      - name: Save artifact with build results
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: |
            artifacts/*
          retention-days: 7

  build-pdf:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Define instance ID
        run: |
          INSTANCE_ID="${INSTANCE#*/}"
          INSTANCE_ID_UPPER=$(echo "$INSTANCE_ID" | tr '[:lower:]' '[:upper:]')
          echo "INSTANCE_ID_UPPER=$INSTANCE_ID_UPPER" >> $GITHUB_ENV
          echo "Extracted ID: $INSTANCE_ID_UPPER"

      - name: Build Writerside docs using Docker
        uses: JetBrains/writerside-github-action@v4
        with:
          instance: ${{ env.INSTANCE }}
          docker-version: ${{ env.DOCKER_VERSION }}
          pdf: ${{ env.PDF }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: artifact
          path: |
            artifacts/pdfSource${{ env.INSTANCE_ID_UPPER }}.pdf
            artifacts/pdfSource${{ env.INSTANCE_ID_UPPER }}.html
          retention-days: 7

#  test:
#    needs: build
#    runs-on: ubuntu-latest
#    container:
#      image: openjdk:18-jdk-alpine
#    steps:
#      - name: Download artifacts
#        uses: actions/download-artifact@v4
#        with:
#          name: docs
#          path: artifacts
#      - name: Add curl
#        run: apk add curl
#      - name: Run Writerside checker
#        working-directory: artifacts
#        run: |
#          curl -o wrs-checker.jar -L https://packages.jetbrains.team/maven/p/writerside/maven/com/jetbrains/writerside/writerside-ci-checker/1.3/writerside-ci-checker-1.3.jar
#          java -jar wrs-checker.jar report.json ${{ env.INSTANCE }}
  
  

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Test documentation
        uses: JetBrains/writerside-checker-action@v1
        with:
          instance: ${{ env.INSTANCE }}
          is-group: ${{ env.IS_GROUP }}


  #  build-search-index:
  #    needs: build
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Setup Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: '18'
  #
  #      - name: Download artifacts
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: docs
  #          path: artifacts
  #
  #      - name: Unzip documentation
  #        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir
  #
  #      - name: Create temp directory for index building
  #        run: |
  #          mkdir -p temp
  #          echo '{
  #            "dependencies": {
  #              "lunr": "^2.3.9",
  #              "cheerio": "^1.0.0-rc.12"
  #            }
  #          }' > temp/package.json
  #
  #      - name: Install dependencies
  #        working-directory: temp
  #        run: npm install
  #
  #      - name: Create index builder script
  #        run: |
  #          cat > temp/build-index.js << 'EOL'
  #          const fs = require("fs");
  #          const lunr = require("lunr");
  #          const cheerio = require("cheerio");
  #          const path = require("path");
  #
  #          const jsDir = "../dir";
  #          if (!fs.existsSync(jsDir)) {
  #            fs.mkdirSync(jsDir, { recursive: true });
  #          }
  #
  #          const store = {};
  #          const idx = lunr(function() {
  #            this.ref("id");
  #            this.field("title");
  #            this.field("content");
  #
  #            const htmlFiles = fs.readdirSync("../dir")
  #              .filter(file => file.endsWith(".html"));
  #
  #            htmlFiles.forEach(file => {
  #              const content = fs.readFileSync(path.join("../dir", file), "utf8");
  #              const $ = cheerio.load(content);
  #
  #              const id = file;
  #              const title = $("title").text() || $("h1").first().text() || file;
  #              const text = $("body").text();
  #
  #              this.add({
  #                id: id,
  #                title: title,
  #                content: text
  #              });
  #
  #              store[id] = {
  #                title: title,
  #                url: "/" + file,
  #                preview: text.slice(0, 200) + "..."
  #              };
  #            });
  #          });
  #
  #          const output = `const searchIndex = {
  #            "index": ${JSON.stringify(idx)},
  #            "store": ${JSON.stringify(store)}
  #          };`;
  #
  #          fs.writeFileSync(path.join(jsDir, "search-index.js"), output);
  #          EOL
  #
  #      - name: Build search index
  #        working-directory: temp
  #        run: node build-index.js
  #
  #      - name: Inject search-index.js reference
  #        run: |
  #          find ./dir -name "*.html" -type f -exec sed -i 's/<\/head>/<script src="\/search-index.js" defer><\/script><\/head>/' {} \;
  #
  #      - name: Upload directory with search index
  #        uses: actions/upload-artifact@v4
  #        with:
  #          name: docs-with-search
  #          path: dir
  #          retention-days: 1
  #
  #  deploy:
  #    environment:
  #      name: github-pages
  #      url: ${{ steps.deployment.outputs.page_url }}
  #    needs: [ build, build-search-index ]
  #    runs-on: ubuntu-latest
  #    steps:
  #      - name: Download docs with search
  #        uses: actions/download-artifact@v4
  #        with:
  #          name: docs-with-search
  #          path: dir
  #
  #      - name: Setup Pages
  #        uses: actions/configure-pages@v4
  #
  #      - name: Package and upload Pages artifact
  #        uses: actions/upload-pages-artifact@v3
  #        with:
  #          path: dir
  #
  #      - name: Deploy to GitHub Pages
  #        id: deployment
  #        uses: actions/deploy-pages@v4

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts

      - name: Unzip artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.artifact }}" -d dir

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Package and upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dir

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  publish-indexes:
    needs: build
    runs-on: ubuntu-latest
    container:
      image: registry.jetbrains.team/p/writerside/builder/algolia-publisher:2.0.32-3
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: docs
          path: artifacts
      - name: Unzip Algolia artifact
        run: unzip -O UTF-8 -qq "artifacts/${{ needs.build.outputs.algolia_artifact }}" -d algolia-indexes
      - name: Update Algolia Index
        run: |
          if [ -z "${{ secrets.ALGOLIA_KEY }}" ]; then
            echo "ALGOLIA_KEY secret is not set in GitHub Secrets"
            exit 1
          else
            env "algolia-key=${{ secrets.ALGOLIA_KEY }}" java -jar /opt/builder/help-publication-agent.jar \
            update-index \
            --application-name ${{ env.ALGOLIA_APP_NAME }} \
            --index-name ${{ env.ALGOLIA_INDEX_NAME }} \
            --product ${{ env.CONFIG_JSON_PRODUCT }} \
            --version ${{ env.CONFIG_JSON_VERSION }} \
            --index-directory algolia-indexes/ \
            2>&1 | tee algolia-update-index-log.txt
          fi
